/* 
 * Project City Project
 * Author: CKCooper
 * Date: 3/16/2024
 * For comprehensive documentation and examples, please visit:
 * https://docs.particle.io/firmware/best-practices/firmware-template/
 */

// Include Particle Device OS APIs
#include "Particle.h"
#include <DFPlay.h>
#include "Button.h"

const int SPIN=D5;
int i;

Button soundButton(D1);
Button scentButton(D10);
// Selection SDcard = {2,0,0,0,0}; // Selects all tracks on the SD card

DFPlay dfPlay;

void playsounds();

// Let Device OS manage the connection to the Particle Cloud
SYSTEM_MODE(AUTOMATIC);

// Run the application and system concurrently in separate threads
SYSTEM_THREAD(ENABLED);

// Show system, cloud connectivity, and application logs over USB
// View logs with CLI using 'particle serial monitor --follow'
SerialLogHandler logHandler(LOG_LEVEL_INFO);

void setup() {
  Serial.begin(9600);
  //Serial1.begin(11000);
  waitFor(Serial.isConnected,10000);

  pinMode (SPIN, OUTPUT);

  dfPlay.begin();					// Prepares DFPlay for execution
  dfPlay.setVolume(15);			// Sets volume level to 10 (valid range = 0 to 30)
  Selection SDcard = {2,0,0,0,0}; // Selects all tracks on the SD card
  Serial.printf("tracks selected\n");
  dfPlay.play(SDcard);			// Plays the selection
  Serial.printf("Tracks playing\n");
  // dfPlay.pause();
  // Serial.printf("Player Paused\n");
}

void loop() {

// Selection SDcard = {2,0,0,0,0}; // Selects all tracks on the SD card

// for(i=0; i<2; i++){
//   Serial.printf("playsounds is running\n");
  //dfPlay.manageDevice();     // Sends commands to DFPlayer & processes returned data.
  // dfPlay.play(SDcard);     // Plays the selection
  // Serial.printf("Tracks playing\n");
//}
if (soundButton.isClicked()){
  Serial.printf("soundButton.isClicked\n");
  //playsounds();
  dfPlay.manageDevice();     // Sends commands to DFPlayer & processes returned data.
  Selection SDcard = {2,0,0,0,0}; // Selects all tracks on the SD card
  dfPlay.play(SDcard);     // Plays the selection
  Serial.printf("Tracks playing\n");
  dfPlay.pause();
  Serial.printf("Player Paused\n");
} 
else {
  dfPlay.stop();
  dfPlay.manageDevice();
} 
// dfPlay.manageDevice();
// if (soundButton.isClicked()){    
  // dfPlay.resume();
  // Serial.printf("Player resume\n");
  //dfPlay.manageDevice();			// Sends commands to DFPlayer & processes returned data. 
  // Selection SDcard = {2,0,0,0,0}; // Selects all tracks on the SD card
  // Serial.printf("tracks selected\n");
  // dfPlay.play(SDcard);			// Plays the selection
  // Serial.printf("Tracks playing\n");
  // dfPlay.manageDevice();			// Sends commands to DFPlayer & processes returned data. 
  //Serial.printf("sound on\n");
  // dfPlay.pause();
  // Serial.printf("Player Paused\n");
  // dfPlay.manageDevice();			// Sends commands to DFPlayer & processes returned data. 
//}

if(scentButton.isClicked()){
  digitalWrite(SPIN, HIGH);
  		
  Serial.printf("scent on\n");
  delay(5000);
  digitalWrite(SPIN, LOW);
  Serial.printf("scent off\n");
}
}

void playsounds(){

int i;
Selection SDcard = {2,0,0,0,0}; // Selects all tracks on the SD card

// for(i=0; i>2; i++){
  Serial.printf("playsounds is running\n");
  dfPlay.manageDevice();     // Sends commands to DFPlayer & processes returned data.
  dfPlay.play(SDcard);     // Plays the selection
  Serial.printf("Tracks playing\n");
  //dfPlay.manageDevice();     // Sends commands to DFPlayer & processes returned data.
  // dfPlay.pause();
  // Serial.printf("Player Paused\n");
 
//}
  // dfPlay.pause();
  // Serial.printf("Player Paused\n");
  // dfPlay.manageDevice();     // Sends commands to DFPlayer & processes returned data.

}